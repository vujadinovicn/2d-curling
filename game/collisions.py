from helper import constants


def wall_collision(stones):
    """
    Function checks and reacts to collision with wall for every stone.
    :param stones: List of shot stones.
    """
    for stone in stones:
        stone.wall_collision()


def collision(stones):
    """
    Function calls method for stone collision for every pairs of stones in list.
    List is generated by Sweep and Prune algorithm.
    :param stones: List of shot stones.
    """
    sap_stones = sweep_and_prune(stones)
    for i in range(len(sap_stones)):
        pair = sap_stones[i]
        pair[0].stone_collision(pair[1])


def sap_req(first, second):
    """
    Function checks requirement for possible collision between stones.
    :param first: First stone.
    :param second: Second stone.
    :return: (bool) If two stones' projections on x-axis intercept, returns True, False if not.
    """
    return first.x - constants.radius > second.x + constants.radius


def sweep_and_prune(stones):
    """
    Function represents sweep and prune algorithm.
    :param stones: List of shot stones.
    :return: List of stones' pairs that can possibly collide.
    """
    sorted_stones = sorted(stones, key=lambda x: x.x, reverse=False)
    sap_stones = []
    active = []
    for i in range(len(sorted_stones)):
        s = 0
        for j in range(len(active)):
            if sap_req(sorted_stones[i], active[j-s]):
                active.pop(j-s)
                s += 1
            else:
                sap_stones.append([sorted_stones[i], active[j-s]])
        active.append(sorted_stones[i])
    return sap_stones
